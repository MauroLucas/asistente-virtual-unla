services:
  # Base de CONOCIMIENTO (tus datos de negocio)
  postgres_kb:
    image: postgres:15
    container_name: postgres_kb
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}        # ej: admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}            # ej: knowledge_db
    ports:
      - "5433:5432"                          # Host -> Contenedor
    volumes:
      - postgres_kb_data:/var/lib/postgresql/data
      - ./postgres_kb/initdb_kb:/docker-entrypoint-initdb.d:ro

  # Postgres EXCLUSIVO para n8n
  postgres_n8n:
    image: postgres:15
    container_name: postgres_n8n
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${N8N_USER}
      POSTGRES_PASSWORD: ${N8N_PASSWORD}
      POSTGRES_DB: ${N8N_DB}                 # ej: n8n_db
    ports:
      - "5435:5432"                          # Host -> Contenedor
    volumes:
      - postgres_n8n_data:/var/lib/postgresql/data

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    env_file:
      - ./.env
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres_n8n
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DB}
      - DB_POSTGRESDB_USER=${N8N_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_PASSWORD}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
    ports:
      - "5678:5678"                          # UI de n8n
    depends_on:
      - postgres_n8n

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    environment:
      - OLLAMA_MODELS=${OLLAMA_MODELS:-llama3:8b-instruct-q4_0}
    ports:
      - "11434:11434"                        # API de Ollama
    volumes:
      - ollama_data:/root/.ollama

  # Servicio de ETL en Python
  etl:
    build:
      context: ./ETL
      dockerfile: Dockerfile
    container_name: etl
    env_file:
      - ./.env
    environment:
      PGHOST: postgres_kb
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      DATA_DIR: /app/data                   # donde se montan los Excel
    volumes:
      - ./ETL/data:/app/data:ro             # Excel de entrada (solo lectura)
      # (opcional) desarrollo en caliente del código:
      # - ./ETL/app:/app/app:ro
    depends_on:
      - postgres_kb

  openwebui:
    image: ghcr.io/open-webui/open-webui:main   # ajustar según tag
    ports:
      - "3000:8080"
    environment:
    # Configuración básica
      - WEBUI_NAME=UNLA Asistente Virtual Académico

      # Configuración ESSENCIAL de modelos
      - OLLAMA_BASE_URL=http://ollama:11434
      - DEFAULT_MODEL=llama3:8b-instruct-q4_0

      # Variables CLAVE para mostrar modelos
      - ENABLE_LOCAL_MODEL_FILTER=true  # Permite ver todos los modelos
      - SHOW_LOCAL_MODELS=true           # Muestra modelos locales

      # Configuración de autenticación (IMPORTANTE)
      - WEBUI_AUTH=false   # Desactiva autenticación completamente
      - ENABLE_SIGNUP=false                    # Desactiva registro de nuevos usuarios
      - DEFAULT_USER_ROLE=user                # Rol por defecto para usuarios
      - ENABLE_LOGIN_FORM=false               # Mantén esto en true inicialmente

      # Configuración para el asistente académico
      - ENABLE_COMMUNITY_SHARING=false        # Desactiva compartir chats
      - ENABLE_MESSAGE_RATING=true            # Permite calificar respuestas (útil para métricas)

      # Configuración de interfaz
      - DEFAULT_LOCALE=es                     # Interfaz en español
      - SHOW_ADMIN_DETAILS=false             # Oculta detalles de admin a usuarios
      # si usás OpenRouter, podés añadir variables para su API key/endpoint
    volumes:
      - ./open_webui/openwebui_data:/app/backend/data         # carpeta local para persistencia
    depends_on:
      - ollama

volumes:
  postgres_kb_data:
  postgres_n8n_data:
  ollama_data:
  openwebui_data:







